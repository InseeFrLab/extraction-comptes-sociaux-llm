# .github/workflows/ci.yml

name: CI Extraction-LLM

# 1. D√©clencheurs
on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches:
      - main

# 2. Jobs
jobs:
  lint:
    name: üîç Lint Python
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Installer les d√©pendances pour lint
        working-directory: api_centrale
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Lancer flake8 sur api_centrale
        working-directory: api_centrale
        run: |
          flake8 .

      - name: Installer d√©pendances pour api_marker ling
        working-directory: api_marker
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Lancer flake8 sur api_marker
        working-directory: api_marker
        run: |
          flake8 .

      - name: Installer d√©pendances pour marker_proxy lint
        working-directory: marker_proxy
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Lancer flake8 sur marker_proxy
        working-directory: marker_proxy
        run: |
          flake8 .

  test:
    name: ‚úÖ Test Unitaire (si tests pr√©sents)
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Exemple pour api_centrale (si vous avez tests/ ou pytest.ini)
      - name: Installer d√©pendances api_centrale pour tests
        working-directory: api_centrale
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Lancer les tests pytest pour api_centrale
        working-directory: api_centrale
        run: |
          if [ -d "tests" ]; then
            pytest --maxfail=1 --disable-warnings -q
          else
            echo "Aucun test √† ex√©cuter pour api_centrale"
          fi

      # Exemple pour api_marker
      - name: Installer d√©pendances api_marker pour tests
        working-directory: api_marker
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Lancer les tests pytest pour api_marker
        working-directory: api_marker
        run: |
          if [ -d "tests" ]; then
            pytest --maxfail=1 --disable-warnings -q
          else
            echo "Aucun test √† ex√©cuter pour api_marker"
          fi

      # Exemple pour marker_proxy
      - name: Installer d√©pendances marker_proxy pour tests
        working-directory: marker_proxy
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Lancer les tests pytest pour marker_proxy
        working-directory: marker_proxy
        run: |
          if [ -d "tests" ]; then
            pytest --maxfail=1 --disable-warnings -q
          else
            echo "Aucun test √† ex√©cuter pour marker_proxy"
          fi

  build-docker:
    name: üê≥ Build Images Docker
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      # Login Docker Hub (optionnel)
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build et tag API_CENTRALE
        working-directory: api_centrale
        run: |
          docker build -t myorg/api_centrale:latest .

      - name: Build et tag API_MARKER
        working-directory: api_marker
        run: |
          docker build -t myorg/api_marker:latest .

      - name: Build et tag MARKER_PROXY
        working-directory: marker_proxy
        run: |
          docker build -t myorg/marker_proxy:latest .

      # (Optionnel) Push vers un registre si vous aviez activ√© le login
      # - name: Push API_CENTRALE
      #   run: docker push myorg/api_centrale:latest
      #
      # - name: Push API_MARKER
      #   run: docker push myorg/api_marker:latest
      #
      # - name: Push MARKER_PROXY
      #   run: docker push myorg/marker_proxy:latest

  # (Optionnel) D√©ploiement automatique
  # deploy:
  #   name: üöÄ D√©ploiement sur un serveur (exemple)
  #   runs-on: ubuntu-latest
  #   needs: build-docker
  #
  #   steps:
  #     - name: D√©ployer sur SSH
  #       uses: appleboy/ssh-action@v0.1.10
  #       with:
  #         host: ${{ secrets.SERVER_HOST }}
  #         username: ${{ secrets.SERVER_USER }}
  #         key: ${{ secrets.SERVER_SSH_KEY }}
  #         script: |
  #           docker pull myorg/api_centrale:latest
  #           docker pull myorg/api_marker:latest
  #           docker pull myorg/marker_proxy:latest
  #           docker-compose -f /chemin/du/projet/docker-compose.yml up -d --no-build

